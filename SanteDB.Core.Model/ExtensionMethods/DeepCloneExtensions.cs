//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SanteDB.Core.Model {
    using SanteDB.Core.Model;
    
    
    internal static class DeepCloner {
        
        internal static SanteDB.Core.Model.Subscription.SubscriptionDefinition CloneDeep(this SanteDB.Core.Model.Subscription.SubscriptionDefinition clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Subscription.SubscriptionDefinition _retVal = new SanteDB.Core.Model.Subscription.SubscriptionDefinition();
            // Clone Uuid
            _retVal.Uuid = clonee.Uuid;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Resource
            _retVal.Resource = clonee.Resource;
            // Clone Order
            _retVal.Order = clonee.Order;
            // Clone ServerDefinitions
            if ((clonee.ServerDefinitions != null)) {
                _retVal.ServerDefinitions = new System.Collections.Generic.List<SanteDB.Core.Model.Subscription.SubscriptionServerDefinition>(clonee.ServerDefinitions);
            }
            // Clone ClientDefinitions
            if ((clonee.ClientDefinitions != null)) {
                _retVal.ClientDefinitions = new System.Collections.Generic.List<SanteDB.Core.Model.Subscription.SubscriptionClientDefinition>(clonee.ClientDefinitions);
            }
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityApplication CloneDeep(this SanteDB.Core.Model.Security.SecurityApplication clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityApplication _retVal = new SanteDB.Core.Model.Security.SecurityApplication();
            // Clone ApplicationSecret
            _retVal.ApplicationSecret = clonee.ApplicationSecret;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Lockout
            _retVal.Lockout = clonee.Lockout;
            // Clone InvalidAuthAttempts
            _retVal.InvalidAuthAttempts = clonee.InvalidAuthAttempts;
            // Clone LastAuthentication
            _retVal.LastAuthentication = clonee.LastAuthentication;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityChallenge CloneDeep(this SanteDB.Core.Model.Security.SecurityChallenge clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityChallenge _retVal = new SanteDB.Core.Model.Security.SecurityChallenge();
            // Clone ChallengeText
            _retVal.ChallengeText = clonee.ChallengeText;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityDevice CloneDeep(this SanteDB.Core.Model.Security.SecurityDevice clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityDevice _retVal = new SanteDB.Core.Model.Security.SecurityDevice();
            // Clone DeviceSecret
            _retVal.DeviceSecret = clonee.DeviceSecret;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Lockout
            _retVal.Lockout = clonee.Lockout;
            // Clone InvalidAuthAttempts
            _retVal.InvalidAuthAttempts = clonee.InvalidAuthAttempts;
            // Clone LastAuthentication
            _retVal.LastAuthentication = clonee.LastAuthentication;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityEntity CloneDeep(this SanteDB.Core.Model.Security.SecurityEntity clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityEntity _retVal = new SanteDB.Core.Model.Security.SecurityEntity();
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityPolicy CloneDeep(this SanteDB.Core.Model.Security.SecurityPolicy clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityPolicy _retVal = new SanteDB.Core.Model.Security.SecurityPolicy();
            // Clone Handler
            _retVal.Handler = clonee.Handler;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone IsPublic
            _retVal.IsPublic = clonee.IsPublic;
            // Clone CanOverride
            _retVal.CanOverride = clonee.CanOverride;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityPolicyInstance CloneDeep(this SanteDB.Core.Model.Security.SecurityPolicyInstance clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance _retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            // Clone PolicyKey
            _retVal.PolicyKey = clonee.PolicyKey;
            // Clone Policy
            if ((clonee.Policy != null)) {
                _retVal.Policy = ((SanteDB.Core.Model.Security.SecurityPolicy)(clonee.Policy.DeepCopy()));
            }
            // Clone GrantType
            _retVal.GrantType = clonee.GrantType;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityProvenance CloneDeep(this SanteDB.Core.Model.Security.SecurityProvenance clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityProvenance _retVal = new SanteDB.Core.Model.Security.SecurityProvenance();
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ApplicationKey
            _retVal.ApplicationKey = clonee.ApplicationKey;
            // Clone UserKey
            _retVal.UserKey = clonee.UserKey;
            // Clone DeviceKey
            _retVal.DeviceKey = clonee.DeviceKey;
            // Clone SessionKey
            _retVal.SessionKey = clonee.SessionKey;
            // Clone ExternalSecurityObjectRefKey
            _retVal.ExternalSecurityObjectRefKey = clonee.ExternalSecurityObjectRefKey;
            // Clone ExternalSecurityObjectRefType
            _retVal.ExternalSecurityObjectRefType = clonee.ExternalSecurityObjectRefType;
            // Clone Device
            if ((clonee.Device != null)) {
                _retVal.Device = ((SanteDB.Core.Model.Security.SecurityDevice)(clonee.Device.DeepCopy()));
            }
            // Clone User
            if ((clonee.User != null)) {
                _retVal.User = ((SanteDB.Core.Model.Security.SecurityUser)(clonee.User.DeepCopy()));
            }
            // Clone Application
            if ((clonee.Application != null)) {
                _retVal.Application = ((SanteDB.Core.Model.Security.SecurityApplication)(clonee.Application.DeepCopy()));
            }
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityRole CloneDeep(this SanteDB.Core.Model.Security.SecurityRole clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityRole _retVal = new SanteDB.Core.Model.Security.SecurityRole();
            int _iterator;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone Users
            if ((clonee.Users != null)) {
                _retVal.Users = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityUser>();
                for (_iterator = 0; (_iterator < clonee.Users.Count); _iterator = (_iterator + 1)) {
                    _retVal.Users.Add(((SanteDB.Core.Model.Security.SecurityUser)(clonee.Users[_iterator].DeepCopy())));
                }
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Security.SecurityUser CloneDeep(this SanteDB.Core.Model.Security.SecurityUser clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Security.SecurityUser _retVal = new SanteDB.Core.Model.Security.SecurityUser();
            int _iterator;
            // Clone Email
            _retVal.Email = clonee.Email;
            // Clone EmailConfirmed
            _retVal.EmailConfirmed = clonee.EmailConfirmed;
            // Clone InvalidLoginAttempts
            _retVal.InvalidLoginAttempts = clonee.InvalidLoginAttempts;
            // Clone Lockout
            _retVal.Lockout = clonee.Lockout;
            // Clone LockoutXml
            _retVal.LockoutXml = clonee.LockoutXml;
            // Clone Password
            _retVal.Password = clonee.Password;
            // Clone SecurityHash
            _retVal.SecurityHash = clonee.SecurityHash;
            // Clone TwoFactorEnabled
            _retVal.TwoFactorEnabled = clonee.TwoFactorEnabled;
            // Clone UserName
            _retVal.UserName = clonee.UserName;
            // Clone UserPhoto
            if ((clonee.UserPhoto != null)) {
                _retVal.UserPhoto = clonee.UserPhoto;
            }
            // Clone LastLoginTime
            _retVal.LastLoginTime = clonee.LastLoginTime;
            // Clone LastLoginTimeXml
            _retVal.LastLoginTimeXml = clonee.LastLoginTimeXml;
            // Clone PasswordExpiration
            _retVal.PasswordExpiration = clonee.PasswordExpiration;
            // Clone PasswordExpirationXml
            _retVal.PasswordExpirationXml = clonee.PasswordExpirationXml;
            // Clone Roles
            if ((clonee.Roles != null)) {
                _retVal.Roles = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityRole>();
                for (_iterator = 0; (_iterator < clonee.Roles.Count); _iterator = (_iterator + 1)) {
                    _retVal.Roles.Add(((SanteDB.Core.Model.Security.SecurityRole)(clonee.Roles[_iterator].DeepCopy())));
                }
            }
            // Clone PhoneNumber
            _retVal.PhoneNumber = clonee.PhoneNumber;
            // Clone PhoneNumberConfirmed
            _retVal.PhoneNumberConfirmed = clonee.PhoneNumberConfirmed;
            // Clone TwoFactorMechnaismKey
            _retVal.TwoFactorMechnaismKey = clonee.TwoFactorMechnaismKey;
            // Clone UserClass
            _retVal.UserClass = clonee.UserClass;
            // Clone UserEntity
            if ((clonee.UserEntity != null)) {
                _retVal.UserEntity = ((SanteDB.Core.Model.Entities.UserEntity)(clonee.UserEntity.DeepCopy()));
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Roles.Patient CloneDeep(this SanteDB.Core.Model.Roles.Patient clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Roles.Patient _retVal = new SanteDB.Core.Model.Roles.Patient();
            int _iterator;
            // Clone MultipleBirthOrder
            _retVal.MultipleBirthOrder = clonee.MultipleBirthOrder;
            // Clone LivingArrangementKey
            _retVal.LivingArrangementKey = clonee.LivingArrangementKey;
            // Clone ReligiousAffiliationKey
            _retVal.ReligiousAffiliationKey = clonee.ReligiousAffiliationKey;
            // Clone LivingArrangement
            if ((clonee.LivingArrangement != null)) {
                _retVal.LivingArrangement = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.LivingArrangement.DeepCopy()));
            }
            // Clone ReligiousAffiliation
            if ((clonee.ReligiousAffiliation != null)) {
                _retVal.ReligiousAffiliation = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReligiousAffiliation.DeepCopy()));
            }
            // Clone EthnicGroupKey
            _retVal.EthnicGroupKey = clonee.EthnicGroupKey;
            // Clone EthnicGroup
            if ((clonee.EthnicGroup != null)) {
                _retVal.EthnicGroup = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.EthnicGroup.DeepCopy()));
            }
            // Clone MaritalStatus
            if ((clonee.MaritalStatus != null)) {
                _retVal.MaritalStatus = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MaritalStatus.DeepCopy()));
            }
            // Clone EducationLevel
            if ((clonee.EducationLevel != null)) {
                _retVal.EducationLevel = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.EducationLevel.DeepCopy()));
            }
            // Clone MaritalStatusKey
            _retVal.MaritalStatusKey = clonee.MaritalStatusKey;
            // Clone EducationLevelKey
            _retVal.EducationLevelKey = clonee.EducationLevelKey;
            // Clone DateOfBirth
            _retVal.DateOfBirth = clonee.DateOfBirth;
            // Clone DateOfBirthPrecision
            _retVal.DateOfBirthPrecision = clonee.DateOfBirthPrecision;
            // Clone GenderConceptKey
            _retVal.GenderConceptKey = clonee.GenderConceptKey;
            // Clone GenderConcept
            if ((clonee.GenderConcept != null)) {
                _retVal.GenderConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.GenderConcept.DeepCopy()));
            }
            // Clone LanguageCommunication
            if ((clonee.LanguageCommunication != null)) {
                _retVal.LanguageCommunication = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>();
                for (_iterator = 0; (_iterator < clonee.LanguageCommunication.Count); _iterator = (_iterator + 1)) {
                    _retVal.LanguageCommunication.Add(((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(clonee.LanguageCommunication[_iterator].DeepCopy())));
                }
            }
            // Clone OccupationKey
            _retVal.OccupationKey = clonee.OccupationKey;
            // Clone Occupation
            if ((clonee.Occupation != null)) {
                _retVal.Occupation = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Occupation.DeepCopy()));
            }
            // Clone DeceasedDate
            _retVal.DeceasedDate = clonee.DeceasedDate;
            // Clone DeceasedDatePrecision
            _retVal.DeceasedDatePrecision = clonee.DeceasedDatePrecision;
            // Clone VipStatusKey
            _retVal.VipStatusKey = clonee.VipStatusKey;
            // Clone VipStatus
            if ((clonee.VipStatus != null)) {
                _retVal.VipStatus = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.VipStatus.DeepCopy()));
            }
            // Clone NationalityKey
            _retVal.NationalityKey = clonee.NationalityKey;
            // Clone Nationality
            if ((clonee.Nationality != null)) {
                _retVal.Nationality = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Nationality.DeepCopy()));
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Roles.Provider CloneDeep(this SanteDB.Core.Model.Roles.Provider clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Roles.Provider _retVal = new SanteDB.Core.Model.Roles.Provider();
            int _iterator;
            // Clone SpecialtyKey
            _retVal.SpecialtyKey = clonee.SpecialtyKey;
            // Clone Specialty
            if ((clonee.Specialty != null)) {
                _retVal.Specialty = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Specialty.DeepCopy()));
            }
            // Clone DateOfBirth
            _retVal.DateOfBirth = clonee.DateOfBirth;
            // Clone DateOfBirthPrecision
            _retVal.DateOfBirthPrecision = clonee.DateOfBirthPrecision;
            // Clone GenderConceptKey
            _retVal.GenderConceptKey = clonee.GenderConceptKey;
            // Clone GenderConcept
            if ((clonee.GenderConcept != null)) {
                _retVal.GenderConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.GenderConcept.DeepCopy()));
            }
            // Clone LanguageCommunication
            if ((clonee.LanguageCommunication != null)) {
                _retVal.LanguageCommunication = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>();
                for (_iterator = 0; (_iterator < clonee.LanguageCommunication.Count); _iterator = (_iterator + 1)) {
                    _retVal.LanguageCommunication.Add(((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(clonee.LanguageCommunication[_iterator].DeepCopy())));
                }
            }
            // Clone OccupationKey
            _retVal.OccupationKey = clonee.OccupationKey;
            // Clone Occupation
            if ((clonee.Occupation != null)) {
                _retVal.Occupation = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Occupation.DeepCopy()));
            }
            // Clone DeceasedDate
            _retVal.DeceasedDate = clonee.DeceasedDate;
            // Clone DeceasedDatePrecision
            _retVal.DeceasedDatePrecision = clonee.DeceasedDatePrecision;
            // Clone VipStatusKey
            _retVal.VipStatusKey = clonee.VipStatusKey;
            // Clone VipStatus
            if ((clonee.VipStatus != null)) {
                _retVal.VipStatus = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.VipStatus.DeepCopy()));
            }
            // Clone NationalityKey
            _retVal.NationalityKey = clonee.NationalityKey;
            // Clone Nationality
            if ((clonee.Nationality != null)) {
                _retVal.Nationality = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Nationality.DeepCopy()));
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Patch.PatchCollection CloneDeep(this SanteDB.Core.Model.Patch.PatchCollection clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Patch.PatchCollection _retVal = new SanteDB.Core.Model.Patch.PatchCollection();
            int _iterator;
            // Clone Patches
            if ((clonee.Patches != null)) {
                _retVal.Patches = new System.Collections.Generic.List<SanteDB.Core.Model.Patch.Patch>();
                for (_iterator = 0; (_iterator < clonee.Patches.Count); _iterator = (_iterator + 1)) {
                    _retVal.Patches.Add(((SanteDB.Core.Model.Patch.Patch)(clonee.Patches[_iterator].DeepCopy())));
                }
            }
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Patch.Patch CloneDeep(this SanteDB.Core.Model.Patch.Patch clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Patch.Patch _retVal = new SanteDB.Core.Model.Patch.Patch();
            // Clone Version
            _retVal.Version = clonee.Version;
            // Clone AppliesTo
            if ((clonee.AppliesTo != null)) {
                _retVal.AppliesTo = clonee.AppliesTo;
            }
            // Clone Operation
            if ((clonee.Operation != null)) {
                _retVal.Operation = new System.Collections.Generic.List<SanteDB.Core.Model.Patch.PatchOperation>(clonee.Operation);
            }
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.ApplicationEntity CloneDeep(this SanteDB.Core.Model.Entities.ApplicationEntity clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.ApplicationEntity _retVal = new SanteDB.Core.Model.Entities.ApplicationEntity();
            int _iterator;
            // Clone SecurityApplication
            if ((clonee.SecurityApplication != null)) {
                _retVal.SecurityApplication = ((SanteDB.Core.Model.Security.SecurityApplication)(clonee.SecurityApplication.DeepCopy()));
            }
            // Clone SecurityApplicationKey
            _retVal.SecurityApplicationKey = clonee.SecurityApplicationKey;
            // Clone SoftwareName
            _retVal.SoftwareName = clonee.SoftwareName;
            // Clone VendorName
            _retVal.VendorName = clonee.VendorName;
            // Clone VersionName
            _retVal.VersionName = clonee.VersionName;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Container CloneDeep(this SanteDB.Core.Model.Entities.Container clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Container _retVal = new SanteDB.Core.Model.Entities.Container();
            int _iterator;
            // Clone LotNumber
            _retVal.LotNumber = clonee.LotNumber;
            // Clone CapacityQuantity
            _retVal.CapacityQuantity = clonee.CapacityQuantity;
            // Clone DiameterQuantity
            _retVal.DiameterQuantity = clonee.DiameterQuantity;
            // Clone HeightQuantity
            _retVal.HeightQuantity = clonee.HeightQuantity;
            // Clone ExpiryDate
            _retVal.ExpiryDate = clonee.ExpiryDate;
            // Clone FormConcept
            if ((clonee.FormConcept != null)) {
                _retVal.FormConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.FormConcept.DeepCopy()));
            }
            // Clone FormConceptKey
            _retVal.FormConceptKey = clonee.FormConceptKey;
            // Clone IsAdministrable
            _retVal.IsAdministrable = clonee.IsAdministrable;
            // Clone Quantity
            _retVal.Quantity = clonee.Quantity;
            // Clone QuantityConcept
            if ((clonee.QuantityConcept != null)) {
                _retVal.QuantityConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.QuantityConcept.DeepCopy()));
            }
            // Clone QuantityConceptKey
            _retVal.QuantityConceptKey = clonee.QuantityConceptKey;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.DeviceEntity CloneDeep(this SanteDB.Core.Model.Entities.DeviceEntity clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.DeviceEntity _retVal = new SanteDB.Core.Model.Entities.DeviceEntity();
            int _iterator;
            // Clone ManufacturerModelName
            _retVal.ManufacturerModelName = clonee.ManufacturerModelName;
            // Clone OperatingSystemName
            _retVal.OperatingSystemName = clonee.OperatingSystemName;
            // Clone SecurityDevice
            if ((clonee.SecurityDevice != null)) {
                _retVal.SecurityDevice = ((SanteDB.Core.Model.Security.SecurityDevice)(clonee.SecurityDevice.DeepCopy()));
            }
            // Clone SecurityDeviceKey
            _retVal.SecurityDeviceKey = clonee.SecurityDeviceKey;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Entity CloneDeep(this SanteDB.Core.Model.Entities.Entity clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Entity _retVal = new SanteDB.Core.Model.Entities.Entity();
            int _iterator;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityAddress CloneDeep(this SanteDB.Core.Model.Entities.EntityAddress clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityAddress _retVal = new SanteDB.Core.Model.Entities.EntityAddress();
            int _iterator;
            // Clone AddressUse
            if ((clonee.AddressUse != null)) {
                _retVal.AddressUse = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.AddressUse.DeepCopy()));
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone AddressUseKey
            _retVal.AddressUseKey = clonee.AddressUseKey;
            // Clone Component
            if ((clonee.Component != null)) {
                _retVal.Component = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddressComponent>();
                for (_iterator = 0; (_iterator < clonee.Component.Count); _iterator = (_iterator + 1)) {
                    _retVal.Component.Add(((SanteDB.Core.Model.Entities.EntityAddressComponent)(clonee.Component[_iterator].DeepCopy())));
                }
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityAddressComponent CloneDeep(this SanteDB.Core.Model.Entities.EntityAddressComponent clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityAddressComponent _retVal = new SanteDB.Core.Model.Entities.EntityAddressComponent();
            // Clone ComponentTypeKey
            _retVal.ComponentTypeKey = clonee.ComponentTypeKey;
            // Clone OrderSequence
            _retVal.OrderSequence = clonee.OrderSequence;
            // Clone ComponentType
            if ((clonee.ComponentType != null)) {
                _retVal.ComponentType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ComponentType.DeepCopy()));
            }
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityName CloneDeep(this SanteDB.Core.Model.Entities.EntityName clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityName _retVal = new SanteDB.Core.Model.Entities.EntityName();
            int _iterator;
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone Component
            if ((clonee.Component != null)) {
                _retVal.Component = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityNameComponent>();
                for (_iterator = 0; (_iterator < clonee.Component.Count); _iterator = (_iterator + 1)) {
                    _retVal.Component.Add(((SanteDB.Core.Model.Entities.EntityNameComponent)(clonee.Component[_iterator].DeepCopy())));
                }
            }
            // Clone NameUse
            if ((clonee.NameUse != null)) {
                _retVal.NameUse = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.NameUse.DeepCopy()));
            }
            // Clone NameUseKey
            _retVal.NameUseKey = clonee.NameUseKey;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityNameComponent CloneDeep(this SanteDB.Core.Model.Entities.EntityNameComponent clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityNameComponent _retVal = new SanteDB.Core.Model.Entities.EntityNameComponent();
            // Clone ComponentTypeKey
            _retVal.ComponentTypeKey = clonee.ComponentTypeKey;
            // Clone OrderSequence
            _retVal.OrderSequence = clonee.OrderSequence;
            // Clone ComponentType
            if ((clonee.ComponentType != null)) {
                _retVal.ComponentType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ComponentType.DeepCopy()));
            }
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityRelationship CloneDeep(this SanteDB.Core.Model.Entities.EntityRelationship clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityRelationship _retVal = new SanteDB.Core.Model.Entities.EntityRelationship();
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone HolderKey
            _retVal.HolderKey = clonee.HolderKey;
            // Clone NegationIndicator
            _retVal.NegationIndicator = clonee.NegationIndicator;
            // Clone Strength
            _retVal.Strength = clonee.Strength;
            // Clone Quantity
            _retVal.Quantity = clonee.Quantity;
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            // Clone RelationshipRole
            if ((clonee.RelationshipRole != null)) {
                _retVal.RelationshipRole = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipRole.DeepCopy()));
            }
            // Clone RelationshipRoleKey
            _retVal.RelationshipRoleKey = clonee.RelationshipRoleKey;
            // Clone Classification
            if ((clonee.Classification != null)) {
                _retVal.Classification = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Classification.DeepCopy()));
            }
            // Clone ClassificationKey
            _retVal.ClassificationKey = clonee.ClassificationKey;
            // Clone TargetEntity
            if ((clonee.TargetEntity != null)) {
                _retVal.TargetEntity = ((SanteDB.Core.Model.Entities.Entity)(clonee.TargetEntity.DeepCopy()));
            }
            // Clone TargetEntityKey
            _retVal.TargetEntityKey = clonee.TargetEntityKey;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.EntityTelecomAddress CloneDeep(this SanteDB.Core.Model.Entities.EntityTelecomAddress clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.EntityTelecomAddress _retVal = new SanteDB.Core.Model.Entities.EntityTelecomAddress();
            // Clone AddressUse
            if ((clonee.AddressUse != null)) {
                _retVal.AddressUse = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.AddressUse.DeepCopy()));
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone AddressUseKey
            _retVal.AddressUseKey = clonee.AddressUseKey;
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.ManufacturedMaterial CloneDeep(this SanteDB.Core.Model.Entities.ManufacturedMaterial clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial _retVal = new SanteDB.Core.Model.Entities.ManufacturedMaterial();
            int _iterator;
            // Clone LotNumber
            _retVal.LotNumber = clonee.LotNumber;
            // Clone ExpiryDate
            _retVal.ExpiryDate = clonee.ExpiryDate;
            // Clone FormConcept
            if ((clonee.FormConcept != null)) {
                _retVal.FormConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.FormConcept.DeepCopy()));
            }
            // Clone FormConceptKey
            _retVal.FormConceptKey = clonee.FormConceptKey;
            // Clone IsAdministrable
            _retVal.IsAdministrable = clonee.IsAdministrable;
            // Clone Quantity
            _retVal.Quantity = clonee.Quantity;
            // Clone QuantityConcept
            if ((clonee.QuantityConcept != null)) {
                _retVal.QuantityConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.QuantityConcept.DeepCopy()));
            }
            // Clone QuantityConceptKey
            _retVal.QuantityConceptKey = clonee.QuantityConceptKey;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Material CloneDeep(this SanteDB.Core.Model.Entities.Material clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Material _retVal = new SanteDB.Core.Model.Entities.Material();
            int _iterator;
            // Clone ExpiryDate
            _retVal.ExpiryDate = clonee.ExpiryDate;
            // Clone FormConcept
            if ((clonee.FormConcept != null)) {
                _retVal.FormConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.FormConcept.DeepCopy()));
            }
            // Clone FormConceptKey
            _retVal.FormConceptKey = clonee.FormConceptKey;
            // Clone IsAdministrable
            _retVal.IsAdministrable = clonee.IsAdministrable;
            // Clone Quantity
            _retVal.Quantity = clonee.Quantity;
            // Clone QuantityConcept
            if ((clonee.QuantityConcept != null)) {
                _retVal.QuantityConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.QuantityConcept.DeepCopy()));
            }
            // Clone QuantityConceptKey
            _retVal.QuantityConceptKey = clonee.QuantityConceptKey;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.NonPersonLivingSubject CloneDeep(this SanteDB.Core.Model.Entities.NonPersonLivingSubject clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.NonPersonLivingSubject _retVal = new SanteDB.Core.Model.Entities.NonPersonLivingSubject();
            int _iterator;
            // Clone StrainKey
            _retVal.StrainKey = clonee.StrainKey;
            // Clone Strain
            if ((clonee.Strain != null)) {
                _retVal.Strain = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Strain.DeepCopy()));
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Organization CloneDeep(this SanteDB.Core.Model.Entities.Organization clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Organization _retVal = new SanteDB.Core.Model.Entities.Organization();
            int _iterator;
            // Clone IndustryConcept
            if ((clonee.IndustryConcept != null)) {
                _retVal.IndustryConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.IndustryConcept.DeepCopy()));
            }
            // Clone IndustryConceptKey
            _retVal.IndustryConceptKey = clonee.IndustryConceptKey;
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Person CloneDeep(this SanteDB.Core.Model.Entities.Person clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Person _retVal = new SanteDB.Core.Model.Entities.Person();
            int _iterator;
            // Clone DateOfBirth
            _retVal.DateOfBirth = clonee.DateOfBirth;
            // Clone DateOfBirthPrecision
            _retVal.DateOfBirthPrecision = clonee.DateOfBirthPrecision;
            // Clone GenderConceptKey
            _retVal.GenderConceptKey = clonee.GenderConceptKey;
            // Clone GenderConcept
            if ((clonee.GenderConcept != null)) {
                _retVal.GenderConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.GenderConcept.DeepCopy()));
            }
            // Clone LanguageCommunication
            if ((clonee.LanguageCommunication != null)) {
                _retVal.LanguageCommunication = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>();
                for (_iterator = 0; (_iterator < clonee.LanguageCommunication.Count); _iterator = (_iterator + 1)) {
                    _retVal.LanguageCommunication.Add(((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(clonee.LanguageCommunication[_iterator].DeepCopy())));
                }
            }
            // Clone OccupationKey
            _retVal.OccupationKey = clonee.OccupationKey;
            // Clone Occupation
            if ((clonee.Occupation != null)) {
                _retVal.Occupation = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Occupation.DeepCopy()));
            }
            // Clone DeceasedDate
            _retVal.DeceasedDate = clonee.DeceasedDate;
            // Clone DeceasedDatePrecision
            _retVal.DeceasedDatePrecision = clonee.DeceasedDatePrecision;
            // Clone VipStatusKey
            _retVal.VipStatusKey = clonee.VipStatusKey;
            // Clone VipStatus
            if ((clonee.VipStatus != null)) {
                _retVal.VipStatus = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.VipStatus.DeepCopy()));
            }
            // Clone NationalityKey
            _retVal.NationalityKey = clonee.NationalityKey;
            // Clone Nationality
            if ((clonee.Nationality != null)) {
                _retVal.Nationality = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Nationality.DeepCopy()));
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.PersonLanguageCommunication CloneDeep(this SanteDB.Core.Model.Entities.PersonLanguageCommunication clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.PersonLanguageCommunication _retVal = new SanteDB.Core.Model.Entities.PersonLanguageCommunication();
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone IsPreferred
            _retVal.IsPreferred = clonee.IsPreferred;
            // Clone LanguageCode
            _retVal.LanguageCode = clonee.LanguageCode;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.Place CloneDeep(this SanteDB.Core.Model.Entities.Place clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.Place _retVal = new SanteDB.Core.Model.Entities.Place();
            int _iterator;
            // Clone IsMobile
            _retVal.IsMobile = clonee.IsMobile;
            // Clone Services
            if ((clonee.Services != null)) {
                _retVal.Services = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.PlaceService>();
                for (_iterator = 0; (_iterator < clonee.Services.Count); _iterator = (_iterator + 1)) {
                    _retVal.Services.Add(((SanteDB.Core.Model.Entities.PlaceService)(clonee.Services[_iterator].DeepCopy())));
                }
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.PlaceService CloneDeep(this SanteDB.Core.Model.Entities.PlaceService clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.PlaceService _retVal = new SanteDB.Core.Model.Entities.PlaceService();
            // Clone ServiceConcept
            if ((clonee.ServiceConcept != null)) {
                _retVal.ServiceConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ServiceConcept.DeepCopy()));
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ServiceConceptKey
            _retVal.ServiceConceptKey = clonee.ServiceConceptKey;
            // Clone ServiceSchedule
            _retVal.ServiceSchedule = clonee.ServiceSchedule;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Entities.UserEntity CloneDeep(this SanteDB.Core.Model.Entities.UserEntity clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Entities.UserEntity _retVal = new SanteDB.Core.Model.Entities.UserEntity();
            int _iterator;
            // Clone SecurityUserKey
            _retVal.SecurityUserKey = clonee.SecurityUserKey;
            // Clone DateOfBirth
            _retVal.DateOfBirth = clonee.DateOfBirth;
            // Clone DateOfBirthPrecision
            _retVal.DateOfBirthPrecision = clonee.DateOfBirthPrecision;
            // Clone GenderConceptKey
            _retVal.GenderConceptKey = clonee.GenderConceptKey;
            // Clone GenderConcept
            if ((clonee.GenderConcept != null)) {
                _retVal.GenderConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.GenderConcept.DeepCopy()));
            }
            // Clone LanguageCommunication
            if ((clonee.LanguageCommunication != null)) {
                _retVal.LanguageCommunication = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.PersonLanguageCommunication>();
                for (_iterator = 0; (_iterator < clonee.LanguageCommunication.Count); _iterator = (_iterator + 1)) {
                    _retVal.LanguageCommunication.Add(((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(clonee.LanguageCommunication[_iterator].DeepCopy())));
                }
            }
            // Clone OccupationKey
            _retVal.OccupationKey = clonee.OccupationKey;
            // Clone Occupation
            if ((clonee.Occupation != null)) {
                _retVal.Occupation = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Occupation.DeepCopy()));
            }
            // Clone DeceasedDate
            _retVal.DeceasedDate = clonee.DeceasedDate;
            // Clone DeceasedDatePrecision
            _retVal.DeceasedDatePrecision = clonee.DeceasedDatePrecision;
            // Clone VipStatusKey
            _retVal.VipStatusKey = clonee.VipStatusKey;
            // Clone VipStatus
            if ((clonee.VipStatus != null)) {
                _retVal.VipStatus = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.VipStatus.DeepCopy()));
            }
            // Clone NationalityKey
            _retVal.NationalityKey = clonee.NationalityKey;
            // Clone Nationality
            if ((clonee.Nationality != null)) {
                _retVal.Nationality = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Nationality.DeepCopy()));
            }
            // Clone Addresses
            if ((clonee.Addresses != null)) {
                _retVal.Addresses = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityAddress>();
                for (_iterator = 0; (_iterator < clonee.Addresses.Count); _iterator = (_iterator + 1)) {
                    _retVal.Addresses.Add(((SanteDB.Core.Model.Entities.EntityAddress)(clonee.Addresses[_iterator].DeepCopy())));
                }
            }
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone CreationAct
            if ((clonee.CreationAct != null)) {
                _retVal.CreationAct = ((SanteDB.Core.Model.Acts.Act)(clonee.CreationAct.DeepCopy()));
            }
            // Clone CreationActKey
            _retVal.CreationActKey = clonee.CreationActKey;
            // Clone DeterminerConcept
            if ((clonee.DeterminerConcept != null)) {
                _retVal.DeterminerConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DeterminerConcept.DeepCopy()));
            }
            // Clone DeterminerConceptKey
            _retVal.DeterminerConceptKey = clonee.DeterminerConceptKey;
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.EntityExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.EntityIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Names
            if ((clonee.Names != null)) {
                _retVal.Names = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityName>();
                for (_iterator = 0; (_iterator < clonee.Names.Count); _iterator = (_iterator + 1)) {
                    _retVal.Names.Add(((SanteDB.Core.Model.Entities.EntityName)(clonee.Names[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.EntityNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Entities.EntityRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.EntityTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.EntityTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Telecoms
            if ((clonee.Telecoms != null)) {
                _retVal.Telecoms = new System.Collections.Generic.List<SanteDB.Core.Model.Entities.EntityTelecomAddress>();
                for (_iterator = 0; (_iterator < clonee.Telecoms.Count); _iterator = (_iterator + 1)) {
                    _retVal.Telecoms.Add(((SanteDB.Core.Model.Entities.EntityTelecomAddress)(clonee.Telecoms[_iterator].DeepCopy())));
                }
            }
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.AssigningAuthority CloneDeep(this SanteDB.Core.Model.DataTypes.AssigningAuthority clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.AssigningAuthority _retVal = new SanteDB.Core.Model.DataTypes.AssigningAuthority();
            // Clone AssigningApplicationKey
            _retVal.AssigningApplicationKey = clonee.AssigningApplicationKey;
            // Clone AssigningApplication
            if ((clonee.AssigningApplication != null)) {
                _retVal.AssigningApplication = ((SanteDB.Core.Model.Security.SecurityApplication)(clonee.AssigningApplication.DeepCopy()));
            }
            // Clone Reliability
            _retVal.Reliability = clonee.Reliability;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone SourceEntity
            if ((clonee.SourceEntity != null)) {
                _retVal.SourceEntity = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(clonee.SourceEntity.DeepCopy()));
            }
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.CodeSystem CloneDeep(this SanteDB.Core.Model.DataTypes.CodeSystem clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.CodeSystem _retVal = new SanteDB.Core.Model.DataTypes.CodeSystem();
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone Domain
            _retVal.Domain = clonee.Domain;
            // Clone Url
            _retVal.Url = clonee.Url;
            // Clone VersionText
            _retVal.VersionText = clonee.VersionText;
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.Concept CloneDeep(this SanteDB.Core.Model.DataTypes.Concept clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.Concept _retVal = new SanteDB.Core.Model.DataTypes.Concept();
            int _iterator;
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.DataTypes.ConceptRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone ClassKey
            _retVal.ClassKey = clonee.ClassKey;
            // Clone Class
            if ((clonee.Class != null)) {
                _retVal.Class = ((SanteDB.Core.Model.DataTypes.ConceptClass)(clonee.Class.DeepCopy()));
            }
            // Clone ReferenceTerms
            if ((clonee.ReferenceTerms != null)) {
                _retVal.ReferenceTerms = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptReferenceTerm>();
                for (_iterator = 0; (_iterator < clonee.ReferenceTerms.Count); _iterator = (_iterator + 1)) {
                    _retVal.ReferenceTerms.Add(((SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)(clonee.ReferenceTerms[_iterator].DeepCopy())));
                }
            }
            // Clone ConceptNames
            if ((clonee.ConceptNames != null)) {
                _retVal.ConceptNames = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptName>();
                for (_iterator = 0; (_iterator < clonee.ConceptNames.Count); _iterator = (_iterator + 1)) {
                    _retVal.ConceptNames.Add(((SanteDB.Core.Model.DataTypes.ConceptName)(clonee.ConceptNames[_iterator].DeepCopy())));
                }
            }
            // Clone ConceptSetsXml
            if ((clonee.ConceptSetsXml != null)) {
                _retVal.ConceptSetsXml = new System.Collections.Generic.List<System.Guid>(clonee.ConceptSetsXml);
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ConceptTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ConceptExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptClass CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptClass clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptClass _retVal = new SanteDB.Core.Model.DataTypes.ConceptClass();
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptName CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptName clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptName _retVal = new SanteDB.Core.Model.DataTypes.ConceptName();
            // Clone Language
            _retVal.Language = clonee.Language;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptReferenceTerm CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptReferenceTerm clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptReferenceTerm _retVal = new SanteDB.Core.Model.DataTypes.ConceptReferenceTerm();
            // Clone ReferenceTermKey
            _retVal.ReferenceTermKey = clonee.ReferenceTermKey;
            // Clone ReferenceTerm
            if ((clonee.ReferenceTerm != null)) {
                _retVal.ReferenceTerm = ((SanteDB.Core.Model.DataTypes.ReferenceTerm)(clonee.ReferenceTerm.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.ConceptRelationshipType)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptRelationship CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptRelationship clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationship _retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationship();
            // Clone TargetConceptKey
            _retVal.TargetConceptKey = clonee.TargetConceptKey;
            // Clone TargetConcept
            if ((clonee.TargetConcept != null)) {
                _retVal.TargetConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TargetConcept.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.ConceptRelationshipType)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptRelationshipType CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptRelationshipType clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationshipType _retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationshipType();
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptSet CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptSet clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptSet _retVal = new SanteDB.Core.Model.DataTypes.ConceptSet();
            int _iterator;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone Url
            _retVal.Url = clonee.Url;
            // Clone ConceptsXml
            if ((clonee.ConceptsXml != null)) {
                _retVal.ConceptsXml = new System.Collections.Generic.List<System.Guid>(clonee.ConceptsXml);
            }
            // Clone Composition
            if ((clonee.Composition != null)) {
                _retVal.Composition = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ConceptSetComposition>();
                for (_iterator = 0; (_iterator < clonee.Composition.Count); _iterator = (_iterator + 1)) {
                    _retVal.Composition.Add(((SanteDB.Core.Model.DataTypes.ConceptSetComposition)(clonee.Composition[_iterator].DeepCopy())));
                }
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptSetComposition CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptSetComposition clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptSetComposition _retVal = new SanteDB.Core.Model.DataTypes.ConceptSetComposition();
            // Clone Operation
            _retVal.Operation = clonee.Operation;
            // Clone TargetKey
            _retVal.TargetKey = clonee.TargetKey;
            // Clone Target
            if ((clonee.Target != null)) {
                _retVal.Target = ((SanteDB.Core.Model.DataTypes.ConceptSet)(clonee.Target.DeepCopy()));
            }
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptExtension CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptExtension clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptExtension _retVal = new SanteDB.Core.Model.DataTypes.ConceptExtension();
            // Clone ExtensionValueData
            if ((clonee.ExtensionValueData != null)) {
                _retVal.ExtensionValueData = clonee.ExtensionValueData;
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ExtensionValueString
            _retVal.ExtensionValueString = clonee.ExtensionValueString;
            // Clone ExtensionType
            if ((clonee.ExtensionType != null)) {
                _retVal.ExtensionType = ((SanteDB.Core.Model.DataTypes.ExtensionType)(clonee.ExtensionType.DeepCopy()));
            }
            // Clone ExtensionTypeKey
            _retVal.ExtensionTypeKey = clonee.ExtensionTypeKey;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.EntityExtension CloneDeep(this SanteDB.Core.Model.DataTypes.EntityExtension clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.EntityExtension _retVal = new SanteDB.Core.Model.DataTypes.EntityExtension();
            // Clone ExtensionValueData
            if ((clonee.ExtensionValueData != null)) {
                _retVal.ExtensionValueData = clonee.ExtensionValueData;
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ExtensionValueString
            _retVal.ExtensionValueString = clonee.ExtensionValueString;
            // Clone ExtensionType
            if ((clonee.ExtensionType != null)) {
                _retVal.ExtensionType = ((SanteDB.Core.Model.DataTypes.ExtensionType)(clonee.ExtensionType.DeepCopy()));
            }
            // Clone ExtensionTypeKey
            _retVal.ExtensionTypeKey = clonee.ExtensionTypeKey;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ActExtension CloneDeep(this SanteDB.Core.Model.DataTypes.ActExtension clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ActExtension _retVal = new SanteDB.Core.Model.DataTypes.ActExtension();
            // Clone ExtensionValueData
            if ((clonee.ExtensionValueData != null)) {
                _retVal.ExtensionValueData = clonee.ExtensionValueData;
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ExtensionValueString
            _retVal.ExtensionValueString = clonee.ExtensionValueString;
            // Clone ExtensionType
            if ((clonee.ExtensionType != null)) {
                _retVal.ExtensionType = ((SanteDB.Core.Model.DataTypes.ExtensionType)(clonee.ExtensionType.DeepCopy()));
            }
            // Clone ExtensionTypeKey
            _retVal.ExtensionTypeKey = clonee.ExtensionTypeKey;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ExtensionType CloneDeep(this SanteDB.Core.Model.DataTypes.ExtensionType clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ExtensionType _retVal = new SanteDB.Core.Model.DataTypes.ExtensionType();
            // Clone ExtensionHandler
            if ((clonee.ExtensionHandler != null)) {
                _retVal.ExtensionHandler = clonee.ExtensionHandler;
            }
            // Clone ExtensionHandlerXml
            _retVal.ExtensionHandlerXml = clonee.ExtensionHandlerXml;
            // Clone Uri
            _retVal.Uri = clonee.Uri;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone ScopeXml
            if ((clonee.ScopeXml != null)) {
                _retVal.ScopeXml = new System.Collections.Generic.List<System.Guid>(clonee.ScopeXml);
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.GeoTag CloneDeep(this SanteDB.Core.Model.DataTypes.GeoTag clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.GeoTag _retVal = new SanteDB.Core.Model.DataTypes.GeoTag();
            // Clone Lat
            _retVal.Lat = clonee.Lat;
            // Clone Lng
            _retVal.Lng = clonee.Lng;
            // Clone Precise
            _retVal.Precise = clonee.Precise;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.IdentifiedDataReference CloneDeep(this SanteDB.Core.Model.DataTypes.IdentifiedDataReference clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.IdentifiedDataReference _retVal = new SanteDB.Core.Model.DataTypes.IdentifiedDataReference();
            // Clone ReferencedTypeXml
            _retVal.ReferencedTypeXml = clonee.ReferencedTypeXml;
            // Clone ReferencedType
            if ((clonee.ReferencedType != null)) {
                _retVal.ReferencedType = clonee.ReferencedType;
            }
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.EntityIdentifier CloneDeep(this SanteDB.Core.Model.DataTypes.EntityIdentifier clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.EntityIdentifier _retVal = new SanteDB.Core.Model.DataTypes.EntityIdentifier();
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone IssueDate
            _retVal.IssueDate = clonee.IssueDate;
            // Clone ExpiryDate
            _retVal.ExpiryDate = clonee.ExpiryDate;
            // Clone CheckDigit
            _retVal.CheckDigit = clonee.CheckDigit;
            // Clone IdentityDomainKey
            _retVal.IdentityDomainKey = clonee.IdentityDomainKey;
            // Clone IdentifierTypeKey
            _retVal.IdentifierTypeKey = clonee.IdentifierTypeKey;
            // Clone IdentifierType
            if ((clonee.IdentifierType != null)) {
                _retVal.IdentifierType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.IdentifierType.DeepCopy()));
            }
            // Clone IdentityDomain
            if ((clonee.IdentityDomain != null)) {
                _retVal.IdentityDomain = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(clonee.IdentityDomain.DeepCopy()));
            }
            // Clone Reliability
            _retVal.Reliability = clonee.Reliability;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ActIdentifier CloneDeep(this SanteDB.Core.Model.DataTypes.ActIdentifier clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ActIdentifier _retVal = new SanteDB.Core.Model.DataTypes.ActIdentifier();
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone IssueDate
            _retVal.IssueDate = clonee.IssueDate;
            // Clone ExpiryDate
            _retVal.ExpiryDate = clonee.ExpiryDate;
            // Clone CheckDigit
            _retVal.CheckDigit = clonee.CheckDigit;
            // Clone IdentityDomainKey
            _retVal.IdentityDomainKey = clonee.IdentityDomainKey;
            // Clone IdentifierTypeKey
            _retVal.IdentifierTypeKey = clonee.IdentifierTypeKey;
            // Clone IdentifierType
            if ((clonee.IdentifierType != null)) {
                _retVal.IdentifierType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.IdentifierType.DeepCopy()));
            }
            // Clone IdentityDomain
            if ((clonee.IdentityDomain != null)) {
                _retVal.IdentityDomain = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(clonee.IdentityDomain.DeepCopy()));
            }
            // Clone Reliability
            _retVal.Reliability = clonee.Reliability;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.IdentityDomain CloneDeep(this SanteDB.Core.Model.DataTypes.IdentityDomain clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.IdentityDomain _retVal = new SanteDB.Core.Model.DataTypes.IdentityDomain();
            int _iterator;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone DomainName
            _retVal.DomainName = clonee.DomainName;
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone Url
            _retVal.Url = clonee.Url;
            // Clone AssigningAuthority
            if ((clonee.AssigningAuthority != null)) {
                _retVal.AssigningAuthority = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.AssigningAuthority>();
                for (_iterator = 0; (_iterator < clonee.AssigningAuthority.Count); _iterator = (_iterator + 1)) {
                    _retVal.AssigningAuthority.Add(((SanteDB.Core.Model.DataTypes.AssigningAuthority)(clonee.AssigningAuthority[_iterator].DeepCopy())));
                }
            }
            // Clone Policy
            if ((clonee.Policy != null)) {
                _retVal.Policy = ((SanteDB.Core.Model.Security.SecurityPolicy)(clonee.Policy.DeepCopy()));
            }
            // Clone PolicyKey
            _retVal.PolicyKey = clonee.PolicyKey;
            // Clone IdentifierClassificationKey
            _retVal.IdentifierClassificationKey = clonee.IdentifierClassificationKey;
            // Clone ValidationRegex
            _retVal.ValidationRegex = clonee.ValidationRegex;
            // Clone IsUnique
            _retVal.IsUnique = clonee.IsUnique;
            // Clone CustomValidator
            _retVal.CustomValidator = clonee.CustomValidator;
            // Clone CheckDigitAlgorithm
            _retVal.CheckDigitAlgorithm = clonee.CheckDigitAlgorithm;
            // Clone AuthorityScopeXml
            if ((clonee.AuthorityScopeXml != null)) {
                _retVal.AuthorityScopeXml = new System.Collections.Generic.List<System.Guid>(clonee.AuthorityScopeXml);
            }
            // Clone IdentifierClassification
            if ((clonee.IdentifierClassification != null)) {
                _retVal.IdentifierClassification = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.IdentifierClassification.DeepCopy()));
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.EntityNote CloneDeep(this SanteDB.Core.Model.DataTypes.EntityNote clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.EntityNote _retVal = new SanteDB.Core.Model.DataTypes.EntityNote();
            // Clone Text
            _retVal.Text = clonee.Text;
            // Clone AuthorKey
            _retVal.AuthorKey = clonee.AuthorKey;
            // Clone Author
            if ((clonee.Author != null)) {
                _retVal.Author = ((SanteDB.Core.Model.Entities.Entity)(clonee.Author.DeepCopy()));
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ActNote CloneDeep(this SanteDB.Core.Model.DataTypes.ActNote clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ActNote _retVal = new SanteDB.Core.Model.DataTypes.ActNote();
            // Clone Text
            _retVal.Text = clonee.Text;
            // Clone AuthorKey
            _retVal.AuthorKey = clonee.AuthorKey;
            // Clone Author
            if ((clonee.Author != null)) {
                _retVal.Author = ((SanteDB.Core.Model.Entities.Entity)(clonee.Author.DeepCopy()));
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ReferenceTerm CloneDeep(this SanteDB.Core.Model.DataTypes.ReferenceTerm clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ReferenceTerm _retVal = new SanteDB.Core.Model.DataTypes.ReferenceTerm();
            int _iterator;
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone CodeSystem
            if ((clonee.CodeSystem != null)) {
                _retVal.CodeSystem = ((SanteDB.Core.Model.DataTypes.CodeSystem)(clonee.CodeSystem.DeepCopy()));
            }
            // Clone CodeSystemKey
            _retVal.CodeSystemKey = clonee.CodeSystemKey;
            // Clone DisplayNames
            if ((clonee.DisplayNames != null)) {
                _retVal.DisplayNames = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ReferenceTermName>();
                for (_iterator = 0; (_iterator < clonee.DisplayNames.Count); _iterator = (_iterator + 1)) {
                    _retVal.DisplayNames.Add(((SanteDB.Core.Model.DataTypes.ReferenceTermName)(clonee.DisplayNames[_iterator].DeepCopy())));
                }
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ReferenceTermName CloneDeep(this SanteDB.Core.Model.DataTypes.ReferenceTermName clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ReferenceTermName _retVal = new SanteDB.Core.Model.DataTypes.ReferenceTermName();
            // Clone Language
            _retVal.Language = clonee.Language;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.RelationshipValidationRule CloneDeep(this SanteDB.Core.Model.DataTypes.RelationshipValidationRule clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.RelationshipValidationRule _retVal = new SanteDB.Core.Model.DataTypes.RelationshipValidationRule();
            // Clone SourceClassKey
            _retVal.SourceClassKey = clonee.SourceClassKey;
            // Clone SourceClass
            if ((clonee.SourceClass != null)) {
                _retVal.SourceClass = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.SourceClass.DeepCopy()));
            }
            // Clone TargetClassKey
            _retVal.TargetClassKey = clonee.TargetClassKey;
            // Clone TargetClass
            if ((clonee.TargetClass != null)) {
                _retVal.TargetClass = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TargetClass.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone AppliesToXml
            _retVal.AppliesToXml = clonee.AppliesToXml;
            // Clone AppliesTo
            if ((clonee.AppliesTo != null)) {
                _retVal.AppliesTo = clonee.AppliesTo;
            }
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ConceptTag CloneDeep(this SanteDB.Core.Model.DataTypes.ConceptTag clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ConceptTag _retVal = new SanteDB.Core.Model.DataTypes.ConceptTag();
            // Clone TagKey
            _retVal.TagKey = clonee.TagKey;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.EntityTag CloneDeep(this SanteDB.Core.Model.DataTypes.EntityTag clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.EntityTag _retVal = new SanteDB.Core.Model.DataTypes.EntityTag();
            // Clone TagKey
            _retVal.TagKey = clonee.TagKey;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.ActTag CloneDeep(this SanteDB.Core.Model.DataTypes.ActTag clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.ActTag _retVal = new SanteDB.Core.Model.DataTypes.ActTag();
            // Clone TagKey
            _retVal.TagKey = clonee.TagKey;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.DataTypes.TemplateDefinition CloneDeep(this SanteDB.Core.Model.DataTypes.TemplateDefinition clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.DataTypes.TemplateDefinition _retVal = new SanteDB.Core.Model.DataTypes.TemplateDefinition();
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Collection.Bundle CloneDeep(this SanteDB.Core.Model.Collection.Bundle clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Collection.Bundle _retVal = new SanteDB.Core.Model.Collection.Bundle();
            int _iterator;
            // Clone CorrelationSequence
            _retVal.CorrelationSequence = clonee.CorrelationSequence;
            // Clone CorrelationKey
            _retVal.CorrelationKey = clonee.CorrelationKey;
            // Clone Item
            if ((clonee.Item != null)) {
                _retVal.Item = new System.Collections.Generic.List<SanteDB.Core.Model.IdentifiedData>();
                for (_iterator = 0; (_iterator < clonee.Item.Count); _iterator = (_iterator + 1)) {
                    _retVal.Item.Add(((SanteDB.Core.Model.IdentifiedData)(clonee.Item[_iterator].DeepCopy())));
                }
            }
            // Clone FocalObjects
            if ((clonee.FocalObjects != null)) {
                _retVal.FocalObjects = new System.Collections.Generic.List<System.Guid>(clonee.FocalObjects);
            }
            // Clone Offset
            _retVal.Offset = clonee.Offset;
            // Clone Count
            _retVal.Count = clonee.Count;
            // Clone TotalResults
            _retVal.TotalResults = clonee.TotalResults;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Audit.AuditEventData CloneDeep(this SanteDB.Core.Model.Audit.AuditEventData clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Audit.AuditEventData _retVal = new SanteDB.Core.Model.Audit.AuditEventData();
            // Clone ActionCode
            _retVal.ActionCode = clonee.ActionCode;
            // Clone Actors
            if ((clonee.Actors != null)) {
                _retVal.Actors = new System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditActorData>(clonee.Actors);
            }
            // Clone AuditableObjects
            if ((clonee.AuditableObjects != null)) {
                _retVal.AuditableObjects = new System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditableObject>(clonee.AuditableObjects);
            }
            // Clone EventIdentifier
            _retVal.EventIdentifier = clonee.EventIdentifier;
            // Clone EventTypeCode
            if ((clonee.EventTypeCode != null)) {
                _retVal.EventTypeCode = clonee.EventTypeCode;
            }
            // Clone Sensitivity
            _retVal.Sensitivity = clonee.Sensitivity;
            // Clone Outcome
            _retVal.Outcome = clonee.Outcome;
            // Clone TimestampXml
            _retVal.TimestampXml = clonee.TimestampXml;
            // Clone Timestamp
            _retVal.Timestamp = clonee.Timestamp;
            // Clone Metadata
            if ((clonee.Metadata != null)) {
                _retVal.Metadata = new System.Collections.Generic.List<SanteDB.Core.Model.Audit.AuditMetadata>(clonee.Metadata);
            }
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Account CloneDeep(this SanteDB.Core.Model.Acts.Account clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Account _retVal = new SanteDB.Core.Model.Acts.Account();
            int _iterator;
            // Clone Balance
            _retVal.Balance = clonee.Balance;
            // Clone CurrencyKey
            _retVal.CurrencyKey = clonee.CurrencyKey;
            // Clone Currency
            if ((clonee.Currency != null)) {
                _retVal.Currency = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Currency.DeepCopy()));
            }
            // Clone MinBalance
            _retVal.MinBalance = clonee.MinBalance;
            // Clone MaxBalance
            _retVal.MaxBalance = clonee.MaxBalance;
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Act CloneDeep(this SanteDB.Core.Model.Acts.Act clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Act _retVal = new SanteDB.Core.Model.Acts.Act();
            int _iterator;
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.ActParticipation CloneDeep(this SanteDB.Core.Model.Acts.ActParticipation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.ActParticipation _retVal = new SanteDB.Core.Model.Acts.ActParticipation();
            // Clone Classification
            if ((clonee.Classification != null)) {
                _retVal.Classification = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Classification.DeepCopy()));
            }
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ClassificationKey
            _retVal.ClassificationKey = clonee.ClassificationKey;
            // Clone PlayerEntityKey
            _retVal.PlayerEntityKey = clonee.PlayerEntityKey;
            // Clone ParticipationRoleKey
            _retVal.ParticipationRoleKey = clonee.ParticipationRoleKey;
            // Clone PlayerEntity
            if ((clonee.PlayerEntity != null)) {
                _retVal.PlayerEntity = ((SanteDB.Core.Model.Entities.Entity)(clonee.PlayerEntity.DeepCopy()));
            }
            // Clone ParticipationRole
            if ((clonee.ParticipationRole != null)) {
                _retVal.ParticipationRole = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ParticipationRole.DeepCopy()));
            }
            // Clone ActKey
            _retVal.ActKey = clonee.ActKey;
            // Clone Quantity
            _retVal.Quantity = clonee.Quantity;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.ActProtocol CloneDeep(this SanteDB.Core.Model.Acts.ActProtocol clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.ActProtocol _retVal = new SanteDB.Core.Model.Acts.ActProtocol();
            // Clone ProtocolKey
            _retVal.ProtocolKey = clonee.ProtocolKey;
            // Clone Version
            _retVal.Version = clonee.Version;
            // Clone Sequence
            _retVal.Sequence = clonee.Sequence;
            // Clone StateData
            if ((clonee.StateData != null)) {
                _retVal.StateData = clonee.StateData;
            }
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.ActRelationship CloneDeep(this SanteDB.Core.Model.Acts.ActRelationship clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.ActRelationship _retVal = new SanteDB.Core.Model.Acts.ActRelationship();
            // Clone Classification
            if ((clonee.Classification != null)) {
                _retVal.Classification = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Classification.DeepCopy()));
            }
            // Clone NegationIndicator
            _retVal.NegationIndicator = clonee.NegationIndicator;
            // Clone ExternalKey
            _retVal.ExternalKey = clonee.ExternalKey;
            // Clone ClassificationKey
            _retVal.ClassificationKey = clonee.ClassificationKey;
            // Clone TargetActKey
            _retVal.TargetActKey = clonee.TargetActKey;
            // Clone TargetAct
            if ((clonee.TargetAct != null)) {
                _retVal.TargetAct = ((SanteDB.Core.Model.Acts.Act)(clonee.TargetAct.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.CarePathwayDefinition CloneDeep(this SanteDB.Core.Model.Acts.CarePathwayDefinition clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.CarePathwayDefinition _retVal = new SanteDB.Core.Model.Acts.CarePathwayDefinition();
            // Clone Mnemonic
            _retVal.Mnemonic = clonee.Mnemonic;
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Description
            _retVal.Description = clonee.Description;
            // Clone EligibilityCriteria
            _retVal.EligibilityCriteria = clonee.EligibilityCriteria;
            // Clone EnrollmentMode
            _retVal.EnrollmentMode = clonee.EnrollmentMode;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone UpdatedTime
            _retVal.UpdatedTime = clonee.UpdatedTime;
            // Clone UpdatedByKey
            _retVal.UpdatedByKey = clonee.UpdatedByKey;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.CarePlan CloneDeep(this SanteDB.Core.Model.Acts.CarePlan clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.CarePlan _retVal = new SanteDB.Core.Model.Acts.CarePlan();
            int _iterator;
            // Clone Title
            _retVal.Title = clonee.Title;
            // Clone CarePathwayKey
            _retVal.CarePathwayKey = clonee.CarePathwayKey;
            // Clone CarePathway
            if ((clonee.CarePathway != null)) {
                _retVal.CarePathway = ((SanteDB.Core.Model.Acts.CarePathwayDefinition)(clonee.CarePathway.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.ControlAct CloneDeep(this SanteDB.Core.Model.Acts.ControlAct clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.ControlAct _retVal = new SanteDB.Core.Model.Acts.ControlAct();
            int _iterator;
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.FinancialContract CloneDeep(this SanteDB.Core.Model.Acts.FinancialContract clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.FinancialContract _retVal = new SanteDB.Core.Model.Acts.FinancialContract();
            int _iterator;
            // Clone PaymentTermsKey
            _retVal.PaymentTermsKey = clonee.PaymentTermsKey;
            // Clone PaymentTerms
            if ((clonee.PaymentTerms != null)) {
                _retVal.PaymentTerms = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.PaymentTerms.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.FinancialTransaction CloneDeep(this SanteDB.Core.Model.Acts.FinancialTransaction clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.FinancialTransaction _retVal = new SanteDB.Core.Model.Acts.FinancialTransaction();
            int _iterator;
            // Clone Amount
            _retVal.Amount = clonee.Amount;
            // Clone CurrencyKey
            _retVal.CurrencyKey = clonee.CurrencyKey;
            // Clone Currency
            if ((clonee.Currency != null)) {
                _retVal.Currency = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Currency.DeepCopy()));
            }
            // Clone CreditExchangeRate
            _retVal.CreditExchangeRate = clonee.CreditExchangeRate;
            // Clone DebitExchangeRate
            _retVal.DebitExchangeRate = clonee.DebitExchangeRate;
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.InvoiceElement CloneDeep(this SanteDB.Core.Model.Acts.InvoiceElement clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.InvoiceElement _retVal = new SanteDB.Core.Model.Acts.InvoiceElement();
            int _iterator;
            // Clone ModifierKey
            _retVal.ModifierKey = clonee.ModifierKey;
            // Clone Modifier
            if ((clonee.Modifier != null)) {
                _retVal.Modifier = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Modifier.DeepCopy()));
            }
            // Clone UnitQuantity
            _retVal.UnitQuantity = clonee.UnitQuantity;
            // Clone UnitPrice
            _retVal.UnitPrice = clonee.UnitPrice;
            // Clone NetPrice
            _retVal.NetPrice = clonee.NetPrice;
            // Clone CurrencyKey
            _retVal.CurrencyKey = clonee.CurrencyKey;
            // Clone Currency
            if ((clonee.Currency != null)) {
                _retVal.Currency = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Currency.DeepCopy()));
            }
            // Clone Factor
            _retVal.Factor = clonee.Factor;
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Narrative CloneDeep(this SanteDB.Core.Model.Acts.Narrative clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Narrative _retVal = new SanteDB.Core.Model.Acts.Narrative();
            int _iterator;
            // Clone VersionNumber
            _retVal.VersionNumber = clonee.VersionNumber;
            // Clone LanguageCode
            _retVal.LanguageCode = clonee.LanguageCode;
            // Clone MimeType
            _retVal.MimeType = clonee.MimeType;
            // Clone Title
            _retVal.Title = clonee.Title;
            // Clone Text
            if ((clonee.Text != null)) {
                _retVal.Text = clonee.Text;
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Observation CloneDeep(this SanteDB.Core.Model.Acts.Observation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Observation _retVal = new SanteDB.Core.Model.Acts.Observation();
            int _iterator;
            // Clone InterpretationConceptKey
            _retVal.InterpretationConceptKey = clonee.InterpretationConceptKey;
            // Clone ValueType
            _retVal.ValueType = clonee.ValueType;
            // Clone InterpretationConcept
            if ((clonee.InterpretationConcept != null)) {
                _retVal.InterpretationConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.InterpretationConcept.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.QuantityObservation CloneDeep(this SanteDB.Core.Model.Acts.QuantityObservation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.QuantityObservation _retVal = new SanteDB.Core.Model.Acts.QuantityObservation();
            int _iterator;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone ValueType
            _retVal.ValueType = clonee.ValueType;
            // Clone UnitOfMeasureKey
            _retVal.UnitOfMeasureKey = clonee.UnitOfMeasureKey;
            // Clone UnitOfMeasure
            if ((clonee.UnitOfMeasure != null)) {
                _retVal.UnitOfMeasure = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.UnitOfMeasure.DeepCopy()));
            }
            // Clone InterpretationConceptKey
            _retVal.InterpretationConceptKey = clonee.InterpretationConceptKey;
            // Clone InterpretationConcept
            if ((clonee.InterpretationConcept != null)) {
                _retVal.InterpretationConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.InterpretationConcept.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.TextObservation CloneDeep(this SanteDB.Core.Model.Acts.TextObservation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.TextObservation _retVal = new SanteDB.Core.Model.Acts.TextObservation();
            int _iterator;
            // Clone ValueType
            _retVal.ValueType = clonee.ValueType;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone InterpretationConceptKey
            _retVal.InterpretationConceptKey = clonee.InterpretationConceptKey;
            // Clone InterpretationConcept
            if ((clonee.InterpretationConcept != null)) {
                _retVal.InterpretationConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.InterpretationConcept.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.CodedObservation CloneDeep(this SanteDB.Core.Model.Acts.CodedObservation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.CodedObservation _retVal = new SanteDB.Core.Model.Acts.CodedObservation();
            int _iterator;
            // Clone ValueType
            _retVal.ValueType = clonee.ValueType;
            // Clone ValueKey
            _retVal.ValueKey = clonee.ValueKey;
            // Clone Value
            if ((clonee.Value != null)) {
                _retVal.Value = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Value.DeepCopy()));
            }
            // Clone InterpretationConceptKey
            _retVal.InterpretationConceptKey = clonee.InterpretationConceptKey;
            // Clone InterpretationConcept
            if ((clonee.InterpretationConcept != null)) {
                _retVal.InterpretationConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.InterpretationConcept.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.DateObservation CloneDeep(this SanteDB.Core.Model.Acts.DateObservation clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.DateObservation _retVal = new SanteDB.Core.Model.Acts.DateObservation();
            int _iterator;
            // Clone ValueType
            _retVal.ValueType = clonee.ValueType;
            // Clone ValueXml
            _retVal.ValueXml = clonee.ValueXml;
            // Clone Value
            _retVal.Value = clonee.Value;
            // Clone InterpretationConceptKey
            _retVal.InterpretationConceptKey = clonee.InterpretationConceptKey;
            // Clone InterpretationConcept
            if ((clonee.InterpretationConcept != null)) {
                _retVal.InterpretationConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.InterpretationConcept.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.PatientEncounter CloneDeep(this SanteDB.Core.Model.Acts.PatientEncounter clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.PatientEncounter _retVal = new SanteDB.Core.Model.Acts.PatientEncounter();
            int _iterator;
            // Clone DischargeDispositionKey
            _retVal.DischargeDispositionKey = clonee.DischargeDispositionKey;
            // Clone AdmissionSourceTypeKey
            _retVal.AdmissionSourceTypeKey = clonee.AdmissionSourceTypeKey;
            // Clone DischargeDisposition
            if ((clonee.DischargeDisposition != null)) {
                _retVal.DischargeDisposition = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DischargeDisposition.DeepCopy()));
            }
            // Clone AdmissionSourceType
            if ((clonee.AdmissionSourceType != null)) {
                _retVal.AdmissionSourceType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.AdmissionSourceType.DeepCopy()));
            }
            // Clone SpecialArrangements
            if ((clonee.SpecialArrangements != null)) {
                _retVal.SpecialArrangements = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.PatientEncounterArrangement>();
                for (_iterator = 0; (_iterator < clonee.SpecialArrangements.Count); _iterator = (_iterator + 1)) {
                    _retVal.SpecialArrangements.Add(((SanteDB.Core.Model.Acts.PatientEncounterArrangement)(clonee.SpecialArrangements[_iterator].DeepCopy())));
                }
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.PatientEncounterArrangement CloneDeep(this SanteDB.Core.Model.Acts.PatientEncounterArrangement clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.PatientEncounterArrangement _retVal = new SanteDB.Core.Model.Acts.PatientEncounterArrangement();
            // Clone ArrangementTypeKey
            _retVal.ArrangementTypeKey = clonee.ArrangementTypeKey;
            // Clone ArrangementType
            if ((clonee.ArrangementType != null)) {
                _retVal.ArrangementType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ArrangementType.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone EffectiveVersionSequenceId
            _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            // Clone ObsoleteVersionSequenceId
            _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            // Clone SourceEntityKey
            _retVal.SourceEntityKey = clonee.SourceEntityKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Procedure CloneDeep(this SanteDB.Core.Model.Acts.Procedure clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Procedure _retVal = new SanteDB.Core.Model.Acts.Procedure();
            int _iterator;
            // Clone MethodKey
            _retVal.MethodKey = clonee.MethodKey;
            // Clone ApproachSiteKey
            _retVal.ApproachSiteKey = clonee.ApproachSiteKey;
            // Clone TargetSiteKey
            _retVal.TargetSiteKey = clonee.TargetSiteKey;
            // Clone Method
            if ((clonee.Method != null)) {
                _retVal.Method = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Method.DeepCopy()));
            }
            // Clone ApproachSite
            if ((clonee.ApproachSite != null)) {
                _retVal.ApproachSite = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ApproachSite.DeepCopy()));
            }
            // Clone TargetSite
            if ((clonee.TargetSite != null)) {
                _retVal.TargetSite = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TargetSite.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.Protocol CloneDeep(this SanteDB.Core.Model.Acts.Protocol clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.Protocol _retVal = new SanteDB.Core.Model.Acts.Protocol();
            // Clone Name
            _retVal.Name = clonee.Name;
            // Clone Oid
            _retVal.Oid = clonee.Oid;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
        
        internal static SanteDB.Core.Model.Acts.SubstanceAdministration CloneDeep(this SanteDB.Core.Model.Acts.SubstanceAdministration clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Core.Model.Acts.SubstanceAdministration _retVal = new SanteDB.Core.Model.Acts.SubstanceAdministration();
            int _iterator;
            // Clone RouteKey
            _retVal.RouteKey = clonee.RouteKey;
            // Clone DoseUnitKey
            _retVal.DoseUnitKey = clonee.DoseUnitKey;
            // Clone Route
            if ((clonee.Route != null)) {
                _retVal.Route = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Route.DeepCopy()));
            }
            // Clone DoseUnit
            if ((clonee.DoseUnit != null)) {
                _retVal.DoseUnit = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.DoseUnit.DeepCopy()));
            }
            // Clone DoseQuantity
            _retVal.DoseQuantity = clonee.DoseQuantity;
            // Clone SequenceId
            _retVal.SequenceId = clonee.SequenceId;
            // Clone SiteKey
            _retVal.SiteKey = clonee.SiteKey;
            // Clone Site
            if ((clonee.Site != null)) {
                _retVal.Site = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Site.DeepCopy()));
            }
            // Clone IsNegated
            _retVal.IsNegated = clonee.IsNegated;
            // Clone ActTime
            _retVal.ActTime = clonee.ActTime;
            // Clone TemplateKey
            _retVal.TemplateKey = clonee.TemplateKey;
            // Clone Template
            if ((clonee.Template != null)) {
                _retVal.Template = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(clonee.Template.DeepCopy()));
            }
            // Clone StartTime
            _retVal.StartTime = clonee.StartTime;
            // Clone StopTime
            _retVal.StopTime = clonee.StopTime;
            // Clone ClassConceptKey
            _retVal.ClassConceptKey = clonee.ClassConceptKey;
            // Clone MoodConceptKey
            _retVal.MoodConceptKey = clonee.MoodConceptKey;
            // Clone ReasonConceptKey
            _retVal.ReasonConceptKey = clonee.ReasonConceptKey;
            // Clone ObsoletionReasonKey
            _retVal.ObsoletionReasonKey = clonee.ObsoletionReasonKey;
            // Clone StatusConceptKey
            _retVal.StatusConceptKey = clonee.StatusConceptKey;
            // Clone TypeConceptKey
            _retVal.TypeConceptKey = clonee.TypeConceptKey;
            // Clone ClassConcept
            if ((clonee.ClassConcept != null)) {
                _retVal.ClassConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ClassConcept.DeepCopy()));
            }
            // Clone MoodConcept
            if ((clonee.MoodConcept != null)) {
                _retVal.MoodConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.MoodConcept.DeepCopy()));
            }
            // Clone ReasonConcept
            if ((clonee.ReasonConcept != null)) {
                _retVal.ReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ReasonConcept.DeepCopy()));
            }
            // Clone ObsoletionReasonConcept
            if ((clonee.ObsoletionReasonConcept != null)) {
                _retVal.ObsoletionReasonConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.ObsoletionReasonConcept.DeepCopy()));
            }
            // Clone StatusConcept
            if ((clonee.StatusConcept != null)) {
                _retVal.StatusConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.StatusConcept.DeepCopy()));
            }
            // Clone TypeConcept
            if ((clonee.TypeConcept != null)) {
                _retVal.TypeConcept = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.TypeConcept.DeepCopy()));
            }
            // Clone Identifiers
            if ((clonee.Identifiers != null)) {
                _retVal.Identifiers = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActIdentifier>();
                for (_iterator = 0; (_iterator < clonee.Identifiers.Count); _iterator = (_iterator + 1)) {
                    _retVal.Identifiers.Add(((SanteDB.Core.Model.DataTypes.ActIdentifier)(clonee.Identifiers[_iterator].DeepCopy())));
                }
            }
            // Clone Relationships
            if ((clonee.Relationships != null)) {
                _retVal.Relationships = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActRelationship>();
                for (_iterator = 0; (_iterator < clonee.Relationships.Count); _iterator = (_iterator + 1)) {
                    _retVal.Relationships.Add(((SanteDB.Core.Model.Acts.ActRelationship)(clonee.Relationships[_iterator].DeepCopy())));
                }
            }
            // Clone Policies
            if ((clonee.Policies != null)) {
                _retVal.Policies = new System.Collections.Generic.List<SanteDB.Core.Model.Security.SecurityPolicyInstance>();
                for (_iterator = 0; (_iterator < clonee.Policies.Count); _iterator = (_iterator + 1)) {
                    _retVal.Policies.Add(((SanteDB.Core.Model.Security.SecurityPolicyInstance)(clonee.Policies[_iterator].DeepCopy())));
                }
            }
            // Clone Extensions
            if ((clonee.Extensions != null)) {
                _retVal.Extensions = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActExtension>();
                for (_iterator = 0; (_iterator < clonee.Extensions.Count); _iterator = (_iterator + 1)) {
                    _retVal.Extensions.Add(((SanteDB.Core.Model.DataTypes.ActExtension)(clonee.Extensions[_iterator].DeepCopy())));
                }
            }
            // Clone Notes
            if ((clonee.Notes != null)) {
                _retVal.Notes = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActNote>();
                for (_iterator = 0; (_iterator < clonee.Notes.Count); _iterator = (_iterator + 1)) {
                    _retVal.Notes.Add(((SanteDB.Core.Model.DataTypes.ActNote)(clonee.Notes[_iterator].DeepCopy())));
                }
            }
            // Clone Tags
            if ((clonee.Tags != null)) {
                _retVal.Tags = new System.Collections.Generic.List<SanteDB.Core.Model.DataTypes.ActTag>();
                for (_iterator = 0; (_iterator < clonee.Tags.Count); _iterator = (_iterator + 1)) {
                    _retVal.Tags.Add(((SanteDB.Core.Model.DataTypes.ActTag)(clonee.Tags[_iterator].DeepCopy())));
                }
            }
            // Clone Protocols
            if ((clonee.Protocols != null)) {
                _retVal.Protocols = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActProtocol>();
                for (_iterator = 0; (_iterator < clonee.Protocols.Count); _iterator = (_iterator + 1)) {
                    _retVal.Protocols.Add(((SanteDB.Core.Model.Acts.ActProtocol)(clonee.Protocols[_iterator].DeepCopy())));
                }
            }
            // Clone Participations
            if ((clonee.Participations != null)) {
                _retVal.Participations = new System.Collections.Generic.List<SanteDB.Core.Model.Acts.ActParticipation>();
                for (_iterator = 0; (_iterator < clonee.Participations.Count); _iterator = (_iterator + 1)) {
                    _retVal.Participations.Add(((SanteDB.Core.Model.Acts.ActParticipation)(clonee.Participations[_iterator].DeepCopy())));
                }
            }
            // Clone GeoTag
            if ((clonee.GeoTag != null)) {
                _retVal.GeoTag = ((SanteDB.Core.Model.DataTypes.GeoTag)(clonee.GeoTag.DeepCopy()));
            }
            // Clone GeoTagKey
            _retVal.GeoTagKey = clonee.GeoTagKey;
            // Clone PreviousVersionKey
            _retVal.PreviousVersionKey = clonee.PreviousVersionKey;
            // Clone IsHeadVersion
            _retVal.IsHeadVersion = clonee.IsHeadVersion;
            // Clone VersionKey
            _retVal.VersionKey = clonee.VersionKey;
            // Clone VersionSequence
            _retVal.VersionSequence = clonee.VersionSequence;
            // Clone CreationTime
            _retVal.CreationTime = clonee.CreationTime;
            // Clone ObsoletionTime
            _retVal.ObsoletionTime = clonee.ObsoletionTime;
            // Clone CreatedByKey
            _retVal.CreatedByKey = clonee.CreatedByKey;
            // Clone ObsoletedByKey
            _retVal.ObsoletedByKey = clonee.ObsoletedByKey;
            // Clone Key
            _retVal.Key = clonee.Key;
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            _retVal.CopyDelayLoadIndicators(clonee);
            return _retVal;
        }
    }
}
